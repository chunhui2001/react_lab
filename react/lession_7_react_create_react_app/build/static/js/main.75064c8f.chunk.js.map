{"version":3,"sources":["_components/SignupComponent.js","App.js","serviceWorker.js","index.js"],"names":["SignupComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","style","backgroundColor","maxWidth","minHeight","state","title","onSignup","bind","assertThisInitialized","prevProps","prevState","onSignupCompleted","react_default","a","createElement","className","type","placeholder","value","Component","defaultProps","App","result","alert","_components_SignupComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAcMA,cAmBL,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAEfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAnBVQ,MAAQ,CACPC,gBAAiB,OAAOC,SAAU,QAAQC,UAAW,SAoBlDV,EAAKW,MAAQ,CACXC,MAAO,4BAITZ,EAAKa,SAAYb,EAAKa,SAASC,KAAdb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KATFA,8KAJCgB,EAAWC,yDAoB9BC,EAD8Bf,KAAKJ,MAA3BmB,oBACU,oCAgBlB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,uCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAmBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAElDH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOD,UAAU,eAAeE,YAAY,cAE1DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAmBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAElDH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWD,UAAU,eAAeE,YAAY,cAE9DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASE,MAAM,QAAQH,UAAU,yCAvE7BI,aAmF9B5B,EAAgB6B,aA1FK,GA4FN7B,QCnEA8B,4LAtBKC,GAEZA,EACFC,MAAM,4BAIRA,MAAM,6DAKN,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACU,EAAD,CAAiBb,kBAAmBf,KAAKe,4BAjB/BQ,aCIEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75064c8f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";       // npm install --save prop-types\n\nconst propTypes = {\n  onSignupCompleted: PropTypes.func\n};\n\nconst defaultProps = {\n  \n};\n\n/**\n  * 用户注册\n  **/\nclass SignupComponent extends Component {\n\n\tstyle = {\n\t\tbackgroundColor: 'blue',maxWidth: '325px',minHeight: '450px'\n\t}\n\n\tcomponentWillMount() {\n\n\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n\n\tcomponentWillUpdate(prevProps, prevState) {\n\t\t// console.log(this.props, this.state, prevProps, prevState, 'componentWillUpdated');\n\t}\n\n\tconstructor(props) {\n\n\t    super(props);\n\n\t    this.state = {\n\t      title: \"用户注册\"\n\t    };\n\n\n    \tthis.onSignup  = this.onSignup.bind(this); \n\n\t}\n\n\tonSignup() {\n\n\t\tconst { onSignupCompleted } = this.props;\n\t\tonSignupCompleted(true);\n\t\n\t}\n\n\n\trender() {\n\n\t\t// return (\n\t\t//   <div className=\"SignupComponent\" style={this.style}>\n\t\t//     <h3 style={{margin:0, color:'white'}}>{this.state.title}</h3>\n\t\t//     <button onClick={this.onSignup}>\n\t\t//       登陆\n\t\t//     </button>\n\t\t//   </div>\n\t\t// );\n\n\t\treturn (\n\t\t\t<div className=\"login-card card\">\n\t\t      <div className=\"card-header\">\n\t\t        <h3>用户登陆</h3>\n\t\t      </div>\n\t\t      <div className=\"card-body\">\n\t\t        <form>\n\t\t          <div className=\"input-group form-group\">\n\t\t            <div className=\"input-group-prepend\">\n\t\t              <span className=\"input-group-text\"><i className=\"fas fa-user\"></i></span>\n\t\t            </div>\n\t\t            <input type=\"text\" className=\"form-control\" placeholder=\"username\" />\n\t\t          </div>\n\t\t          <div className=\"input-group form-group\">\n\t\t            <div className=\"input-group-prepend\">\n\t\t              <span className=\"input-group-text\"><i className=\"fas fa-key\"></i></span>\n\t\t            </div>\n\t\t            <input type=\"password\" className=\"form-control\" placeholder=\"password\" />\n\t\t          </div>\n\t\t          <div className=\"form-group\">\n\t\t            <input type=\"submit\" value=\"Login\" className=\"btn float-right login_btn\" />\n\t\t          </div>\n\t\t        </form>\n\t\t      </div>\n\t\t    </div>\n\t\t\t);\n\t}\n\n}\n\n\nSignupComponent.propTypes = propTypes;\nSignupComponent.defaultProps = defaultProps;\n\nexport default SignupComponent;\n\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n\nimport SignupComponent from './_components/SignupComponent';\n\n\nclass App extends Component {\n\n  onSignupCompleted(result) {\n    \n    if (result) {\n      alert(\"注册成功\");\n      return ;\n    } \n\n    alert(\"注册失败\");\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <SignupComponent onSignupCompleted={this.onSignupCompleted} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}